// Recursive

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1==null){
            return list2;
        }
        if(list2==null){
            return list1;
        }
        ListNode l1=list1;
        ListNode l2= list2;
        if(l1.val<l2.val){
            l1.next=mergeTwoLists(l1.next,l2);
            return l1;
        }
        else{
            l2.next=mergeTwoLists(l1,l2.next);
            return l2;
        }
    }
}


// Iterative

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1==null){
            return list2;
        }
        if(list2==null){
            return list1;
        }
           ListNode head,tail;
        if(list1.val<list2.val){
            head=list1;
            tail=list1;
            list1=list1.next;
        }
        else{
            head=list2;
            tail=list2;
            list2=list2.next;
        }


        while(list1!=null && list2!=null){
            if(list1.val<list2.val){
                tail.next=list1;
                tail=list1;
                list1=list1.next;
            }
            else{
                tail.next=list2;
                tail=list2;
                list2=list2.next;
            }
        }

        if(list1==null){
            tail.next=list2;
        }
        else if(list2==null){
            tail.next=list1;
        }
        return head;
    }
}
