
two pointer sol---> minimizing the window size to k

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int low= 0;
        int high= arr.length-1;
        while(high-low>=k){
            if(x-arr[low]> arr[high]-x){
                low++;
            }
            else{
                high--;
            }
        }

        ArrayList<Integer> list= new ArrayList<>();
        for(int i=low; i<=high; i++){
            list.add(arr[i]);
        }
        return list;
    }
}


binary search sol---> maximixing the window size to k

class Solution {

    public static int lowerBound(int[] arr,int x){
        int s=0;
        int e= arr.length-1;
       int ans= e;
        while(s<=e){
            int m= s+(e-s)/2;
            if(arr[m]>=x){
                ans= m;
                e= m-1;
            }
            else if(arr[m]> x){
               e=m-1;
            }
            else{
                s= m+1;
            }
            
        }
        return ans;
    }
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        

        int high= lowerBound(arr,x);
        int low= high-1;
        while(k>0){
            if(low<0){
                high++;
            }
            else if(high>= arr.length){
                low--;
            }
            else if(x-arr[low]> arr[high]-x){
                high++;
            }
            else{
                low--;
            }
            k--;
        }
        ArrayList<Integer> list= new ArrayList<>();
        for(int i=low+1; i<high; i++){
            list.add(arr[i]);
        }

        return list;
    }
}
