An image is represented by a 2-D array of integers, each integer representing the pixel value of the image.

Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, "flood fill" the image.

To perform a "flood fill", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the newColor.

Example 1:

Input: image = {{1,1,1},{1,1,0},{1,0,1}},
sr = 1, sc = 1, newColor = 2.
Output: {{2,2,2},{2,2,0},{2,0,1}}
Explanation: From the center of the image 
(with position (sr, sc) = (1, 1)), all 
pixels connected by a path of the same color
as the starting pixel are colored with the new 
color.Note the bottom corner is not colored 2, 
because it is not 4-directionally connected to 
the starting pixel.


class Solution
{
    
    public void dfs(int row, int col, int[][] ans, int[][] image, int newColor, int[] delrow, int[] delcol, int initColor){
        ans[row][col]= newColor;
        int n= image.length;
        int m= image[0].length;
        for(int i=0; i<4; i++){
                int nrow= row+delrow[i];
                int ncol= col+delcol[i];
                
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && image[nrow][ncol]== initColor && ans[nrow][ncol] != newColor){
                    dfs(nrow,ncol,ans,image,newColor,delrow,delcol,initColor);
                }
            
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor)
    {
        int initColor= image[sr][sc];
        int[][] ans= image;
        
        int[] delrow={-1,0,+1,0};
        int[] delcol= {0,+1,0,-1};
        dfs(sr,sc,ans,image,newColor,delrow,delcol,initColor);
        return ans;
        
    }
}

TC---> O(n*m)+ 4*(n*m) ==== O(n*m)
SC---> O(n*m)--> using matrix
