Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of '0's (Water) and '1's(Land). Find the number of islands.

Note: An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Example 1:

Input:
grid = {{0,1},{1,0},{1,1},{1,0}}
Output:
1
Explanation:
The grid is-
0 1
1 0
1 1
1 0
All lands are connected.



class Pair{
    int first;
    int second;
    Pair(int first, int second){
        this.first= first;
        this.second= second;
    }
}
class Solution {
    
    public void bfs(int row, int col, int[][] visited, char grid[][]){
        visited[row][col]=1;
        int n= grid.length;
        int m= grid[0].length;
        Queue<Pair> q= new LinkedList<>();
        
        q.add(new Pair(row,col));
        
        while(!q.isEmpty()){
            int r= q.peek().first;
            int c= q.peek().second;
            q.remove();
            
            
            // neigthbours
            
            for(int delrow=-1; delrow<=1; delrow++){
                for(int delcol=-1; delcol<=1; delcol++){
                    int nrow= r+delrow;
                    int ncol= c+delcol;
                    
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]=='1' && visited[nrow][ncol]==0){
                        visited[nrow][ncol]=1;
                        q.add(new Pair(nrow,ncol));
                    }
                }
            }
            
        }
    }
    public int numIslands(char[][] grid) {
        int n= grid.length;
        int m= grid[0].length;
        int count=0;
        int visited[][]= new int[n][m];
        for(int row=0; row<n; row++){
            for(int col=0; col<m; col++){
                if(visited[row][col]==0 && grid[row][col]=='1'){
                    count++;
                    bfs(row,col,visited,grid);
                }
            }
        }
        return count;
    }
}
