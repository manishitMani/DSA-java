Given an undirected graph with V vertices. We say two vertices u and v belong to a single province if there is a path from u to v or v to u. Your task is to find the number of provinces.

Note: A province is a group of directly or indirectly connected cities and no other cities outside of the group.

Example 1:

Input:
[
 [1, 0, 1],
 [0, 1, 0],
 [1, 0, 1]
]



class Solution {
    
    static void dfs(int node, boolean[] vis,ArrayList<ArrayList<Integer>> adjL){
        vis[node]=true;
        for(int it: adjL.get(node)){
            if(vis[it]==false){
                dfs(it,vis,adjL);
            }
        }
    }
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {
        
        ArrayList<ArrayList<Integer>> adjL= new ArrayList<>();
        for(int i=0; i<V; i++){
            adjL.add(new ArrayList<>());
        }
        
        for(int i=0; i<V; i++){
            for(int j=0; j<V; j++){
                if(adj.get(i).get(j)==1 && i!=j){
                    adjL.get(i).add(j);
                    adjL.get(j).add(i);
                }
            }
        }
        
       boolean[] vis= new boolean[V];
       int count=0;
       for(int i=0; i<vis.length; i++){
           if(vis[i]==false){
               count++;
               dfs(i,vis,adjL);
           }
       }
       
       return count;
    }
};
