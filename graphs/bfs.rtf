Input:

Output: 0 1 2 3 4
Explanation: 
0 is connected to 1 , 2 , 3.
2 is connected to 4.
so starting from 0, it will go to 1 then 2
then 3.After this 2 to 4, thus bfs will be
0 1 2 3 4.


class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
       ArrayList<Integer> bfs= new ArrayList<>();
       boolean[] visited= new boolean[V];
       Queue<Integer> q= new LinkedList<>();
       q.add(0);
       visited[0]=true;
       while(!q.isEmpty()){
           
           int node= q.remove();
           bfs.add(node);
           
           for(int it: adj.get(node)){
               if(visited[it]==false){
                   visited[it]=true;
                   q.add(it);
               }
           }
       }
       return bfs;
    }
}


time complexity---> O(N)+O(2E)
