public class SearchInBitonicArray {
	
	public static int peak(int[] arr) {
		
				int s=0,e=arr.length-1;
				while(s<=e) {
					int m= s+(e-s)/2;
					if(m>0 && m<arr.length-1) {
						if(arr[m]>arr[m-1] && arr[m]>arr[m+1]) {
							return m;
						}
						else if(arr[m-1]>arr[m]) {
							e=m-1;
						}
						else if(arr[m+1]> arr[m]) {
							s=m+1;
						}
					}
					if(m==0) {
						if(arr[m+1]>arr[m]) {
							return m+1;
						}
						else {
							return m;
						}
					}
					
					if(m==arr.length-1) {
						if(arr[m]>arr[m-1]) {
							return m;
						}
						else {
							return m-1;
						}
					}
					
				}
				return -1;
			}
	
	public static int searchAsc(int[] arr, int s, int e, int search) {
		while(s<=e) {
			int m= s+(e-s)/2;
			if(arr[m]== search) {
				return m;
			}
			else if(arr[m]> search) {
				e= m-1;
			}
			else if(arr[m]< search) {
				s=m+1;
			}
		}
		return -1;
	}
	
	public static int searchDesc(int[] arr, int s, int e, int search) {
		while(s<=e) {
			int m= s+(e-s)/2;
			if(arr[m]== search) {
				return m;
			}
			else if(arr[m]> search) {
				e= m+1;
			}
			else if(arr[m]< search) {
				s=m-1;
			}
		}
		return -1;
	}
	
	

			
	public static void main(String[] args) {
		int[] arr= {1,3,8,12,4,2};
		int peak= peak(arr);
		int search=3;
		int s1= searchAsc(arr, 0, peak-1, search);
		int s2= searchDesc(arr, peak, arr.length-1, search);
		if(s1== -1) {
			System.out.println(s2);
		}
		else {
			System.out.println(s1);
		}
		

	}

}
