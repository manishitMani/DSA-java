 arr= [11,12,15,18,2,5,6,8]
 1. first find the minimum element
 2. apply norma; binary search in both halves of the sorted array
 3. [11,12,15,18] and [2,5,6,8]
 
 
package binarySearchAV;

public class SearchInReverseSortedArray {
	
	public static int minElementIndex(int[] nums) {
		int l =0, len = nums.length, r = len-1;
        int res = l;
        int prev, next;
        while(l<=r){
            //when array is already sorted 
            if(nums[l] <= nums[r]){
                return l;
            }
            
            int mid= l+ (r-l)/2;
            prev = (mid+len-1)%len;
            next = (mid+1)%len;
            
            //mid is less then the prev and the next element
            if(nums[mid]<= nums[prev] && nums[mid] <= nums[next]){
                return mid;
            }
            else if(nums[mid] >= nums[l]){
                l = mid+1;
            }
            else {
                r= mid-1;
            }
            
        }
        
        return res;
	}
	
	public static int binarySearch(int[] arr, int start, int end ,int key) {
		while(start<=end) {
			int mid= start+(end-start)/2;
			if(arr[mid]== key) {
				return mid;
			}
			else if(key> arr[mid]) {
				start= mid+1;
			}
			else if(key< arr[mid]) {
				end= mid-1;
			}
			
		}
		return -1;
	}

	public static void main(String[] args) {
		int[] arr= {11,12,15,18,2,5,6,8};
		int key=15;
		int minElementIndex= minElementIndex(arr);
		int search1= binarySearch(arr,0,minElementIndex-1,key);
		int search2= binarySearch(arr,minElementIndex,arr.length-1,key);
		if(search1== -1) {
			System.out.println(search2);
			
		}
		else {
			System.out.println(search1);
		}
		
		

	}

}
