ex-> [1,3,2,4] ----->  [3,4,4,-1]
     [1,3,0,0,1,2,4] ------->  [3,4,1,1,2,4,-1]
     
     if j depends on i then stack can be used for optimix=zation
     
     
     public class NGR {
	
	public static ArrayList<Integer> reverse(ArrayList<Integer> list){
		ArrayList<Integer> ans= new ArrayList<>();
		for(int i= list.size()-1; i>=0; i--) {
			ans.add(list.get(i));
		}
		return ans;
	}
	
	
	public static ArrayList<Integer> ngr(int[] arr) {
		ArrayList<Integer> list= new ArrayList<>();
		Stack<Integer> st= new Stack<>();
		for(int i= arr.length-1; i>=0; i--) {
			if(st.size()==0) {
				list.add(-1);
				st.push(arr[i]);
			}
			else if(st.size()>0 && st.peek()> arr[i]) {
				list.add(st.peek());
				st.push(arr[i]);
			}
			else if(st.size()>0 && st.peek()<= arr[i]) {
				while(st.size()>0 && st.peek()<= arr[i]) {
					st.pop();
				}
				if(st.size()==0) {
					list.add(-1);
				}
				else {
					list.add(st.peek());
				}
				
			}
		}
		
		ArrayList<Integer> ans= reverse(list);
		return ans;
	}

	public static void main(String[] args) {
		int[] arr= {1,3,0,0,1,2,4};
		System.out.println(ngr(arr));
		

	}

}

     
