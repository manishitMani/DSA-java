   given matrix
   
        0 1 1 0
        1 1 1 1 
        1 1 1 1
        1 1 0 0 
        
        split into 1 d array and apply max area histogram
        
        public class BinaryMatrixArea_7 {

	public static int mah(int[] arr) {
		int area= Integer.MIN_VALUE;

		Stack<Pair<Integer,Integer>> st= new Stack<>();
		ArrayList<Integer> sl= new ArrayList<>();
		int left= -1;
		int right= arr.length;

		// Calculating next smallest to left

		for(int i=0; i<arr.length; i++) {
			if(st.size()==0) {
				sl.add(left);
			}
			else if(st.size()>0 && st.peek().value< arr[i]) {
				sl.add(st.peek().index);
			}
			else if(st.size()>0 && st.peek().value>= arr[i]) {
				while(st.size()>0 && st.peek().value>= arr[i]) {
					st.pop();
				}
				if(st.size()==0) {
					sl.add(left);
				}
				else {
					sl.add(st.peek().index);
				}
			}
			st.push(new Pair(arr[i],i));
		}

		// Calculating next samllest to right

		while(st.size()!=0) {
			st.pop();
		}

		ArrayList<Integer> sr= new ArrayList<>();
		for(int i= arr.length-1; i>=0; i--) {
			if(st.size()==0) {
				sr.add(right);
			}
			else if(st.size()>0 && st.peek().value< arr[i]) {
				sr.add(st.peek().index);
			}
			else if(st.size()>0 && st.peek().value>= arr[i]) {
				while(st.size()>0 && st.peek().value>= arr[i]) {
					st.pop();
				}
				if(st.size()==0) {
					sr.add(right);
				}
				else {
					sr.add(st.peek().index);
				}
			}
			st.push(new Pair(arr[i],i));
		}

		ArrayList<Integer> revSr= new ArrayList<>();
		for(int i=sr.size()-1; i>=0; i--) {
			revSr.add(sr.get(i));
		}

		int[] expand= new int[arr.length];
		for(int i=0; i<expand.length; i++) {
			expand[i]= revSr.get(i)- sl.get(i)-1;
		}

		for(int i=0; i<arr.length; i++) {
			int a= arr[i]*expand[i];
			area= Math.max(area, a);
		}



		return area;

	}

	public static void main(String[] args) {
		
		int[][] arr= {{0,1,1,0},{1,1,1,1},{1,1,1,1},{1,1,0,0}};
		
        int max= Integer.MIN_VALUE;
        int[] input= new int[arr.length];
        for(int j=0; j<arr.length; j++) {
        	input[j]= arr[0][j];
        }
        
        max= mah(input);
        
        for(int i=1; i<arr.length; i++) {
        	for(int j=0; j<arr.length; j++) {
        		if(arr[i][j]==0) {
        			input[j]= 0;
        		}
        		else {
        			input[j]= input[j]+ arr[i][j];
        		}
        	}
        	max= Math.max(max, mah(input));
        }
       
		
     System.out.println(max);
	}

}
