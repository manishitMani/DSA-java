 CN
RECURSION+MEM

public class Solution {
    public static int solve(int index, int weight, int[] wt, int[] val, int[][] dp){
       if(index==0){
           return val[0]*weight/(wt[0]);
       }
       if(dp[index][weight]!=-1) return dp[index][weight];
       int nt= 0+solve(index-1,weight,wt,val,dp);
       int t=0;
       if(wt[index]<=weight){
           t=val[index]+solve(index,weight-wt[index],wt,val,dp);

       }
       return dp[index][weight]=Math.max(nt,t);
    }
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
       int[][] dp= new int[n][w+1];
       for(int i=0; i<n; i++){
           for(int j=0; j<w+1; j++){
               dp[i][j]=-1;
           }
       }
       return solve(n-1,w,weight,profit,dp);
    }
}

TABULATION + SPACE OPTIMISED

public class Solution {
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
       int[][] dp= new int[n][w+1];
       // base case
       int[] prev= new int[w+1];
       for(int i=0; i<w+1; i++){
           prev[i]=(i/weight[0])*profit[0];
       }
       for(int i=1; i<n; i++){
           int[] curr= new int[w+1];
           for(int j=0; j<w+1; j++){
               int nt= prev[j];
               int t=0;
               if(j>=weight[i]){
                   t=profit[i]+curr[j-weight[i]];
               }
               curr[j]=Math.max(nt,t);
           }
           prev= curr.clone();
       }
       return prev[w];
    }
}


