 REC+MEM

class Solution {
    public int solve(String s1, String s2, int index1, int index2, int[][] dp){
           if(index1<0) return index2+1;
           if(index2<0) return index1+1;
            if(dp[index1][index2]!=-1) return dp[index1][index2];
           if(s1.charAt(index1)==s2.charAt(index2)){
               return dp[index1][index2]=solve(s1,s2,index1-1,index2-1,dp);
           }
           int insert= 1+solve(s1,s2,index1,index2-1,dp);
           int delete= 1+solve(s1,s2,index1-1,index2,dp);
           int replace= 1+solve(s1,s2,index1-1,index2-1,dp);
           return dp[index1][index2]=Math.min(insert,Math.min(delete,replace));
    }
    public int minDistance(String word1, String word2) {
        int n= word1.length();
        int m= word2.length();
        int[][] dp= new int[n+1][m+1];
        for(int i=0; i<n+1; i++){
            for(int j=0; j<m+1; j++){
                dp[i][j]=-1;
            }
        }
        return solve(word1,word2,n-1,m-1,dp);
    }
}

TABULATION with 1 based indexing

class Solution {
 
    public int minDistance(String word1, String word2) {
        int n= word1.length();
        int m= word2.length();
        int[][] dp= new int[n+1][m+1];
        for(int i=0; i<n+1; i++){
            for(int j=0; j<m+1; j++){
                dp[i][j]=0;
            }
        }

        for(int j=0; j<m+1; j++){
            dp[0][j]=j;
        }
        for(int i=1; i<n+1; i++){
            dp[i][0]=i;
        }

        for(int i=1; i<n+1; i++){
            for(int j=1; j<m+1; j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j]=0+ dp[i-1][j-1];
                }
                else{
                    int insert= 1+dp[i][j-1];
                    int delete= 1+dp[i-1][j];
                    int replace= 1+dp[i-1][j-1];
                    dp[i][j]= Math.min(insert,Math.min(delete,replace));
                }
            }
        }
        return dp[n][m];
      
    }
}

SPACE OPTIMIZED


class Solution {
 
    public int minDistance(String word1, String word2) {
        int n= word1.length();
        int m= word2.length();
        
        int[] prev= new int[m+1];
        for(int j=0; j<m+1; j++){
            prev[j]=j;
        }
        // for(int i=1; i<n+1; i++){
        //     dp[i][0]=i;
        // }

        for(int i=1; i<n+1; i++){
            int[] curr= new int[m+1];
            curr[0]=i;
            for(int j=1; j<m+1; j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    curr[j]=0+ prev[j-1];
                }
                else{
                    int insert= 1+curr[j-1];
                    int delete= 1+prev[j];
                    int replace= 1+prev[j-1];
                    curr[j]= Math.min(insert,Math.min(delete,replace));
                }
            }
            prev=curr.clone();
        }
        return prev[m];
        
    }
}
