leetcode-322
RECURSION+MEM

class Solution {
    public int solve(int index, int target, int[] arr, int[][] dp){
     if(index==0){
         if(target%arr[index]==0) return target/arr[index];
         else{
             return Integer.MAX_VALUE/2;
         }
     }
     if(dp[index][target]!=-1) return dp[index][target];
     int nt= 0+solve(index-1,target,arr,dp);
     int t= Integer.MAX_VALUE;
     if(arr[index]<=target){
         t=1+solve(index,target-arr[index],arr,dp);
     }
    
     return dp[index][target]=Math.min(t,nt);
    }
    public int coinChange(int[] coins, int amount) {
        if(amount==0) return 0;
        int n= coins.length;
        int[][] dp= new int[n][amount+1];
        for(int i=0; i<n; i++){
            for(int j=0; j<amount+1; j++){
                dp[i][j]=-1;
            }
        }
        int ans=solve(n-1,amount,coins,dp);
        if(ans<Integer.MAX_VALUE/2) return ans;
        return -1;
    }
}


TABULATION

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n= coins.length;
        int[][] dp= new int[n][amount+1];
        // base case
        for(int i=0; i<amount+1; i++){
            if(i%coins[0]==0){
                dp[0][i]=i/coins[0];
            }
            else{
                dp[0][i]=Integer.MAX_VALUE/2;
            }
        }

        for(int i=1; i<n; i++){
            for(int j=1; j<amount+1; j++){
                int nt= dp[i-1][j];
                int t= Integer.MAX_VALUE/2;
                if(j>=coins[i]){
                    t=1+dp[i][j-coins[i]];
                }
                dp[i][j]= Math.min(t,nt);
            }
        }
        int ans= dp[n-1][amount];
        if(ans<Integer.MAX_VALUE/2) return ans;
        return -1;
    }
}

SPACE OPTIMISED

class Solution {
    public int coinChange(int[] coins, int amount) {
        int n= coins.length;
        int[][] dp= new int[n][amount+1];
        // base case
        int[] prev= new int[amount+1];
        for(int i=0; i<amount+1; i++){
            if(i%coins[0]==0){
                prev[i]=i/coins[0];
            }
            else{
                prev[i]=Integer.MAX_VALUE/2;
            }
        }

        for(int i=1; i<n; i++){
            int[] curr= new int[amount+1];
            for(int j=1; j<amount+1; j++){
                int nt= prev[j];
                int t= Integer.MAX_VALUE/2;
                if(j>=coins[i]){
                    t=1+curr[j-coins[i]];
                }
                curr[j]= Math.min(t,nt);
            }
            prev=curr.clone();
        }
        int ans= prev[amount];
        if(ans<Integer.MAX_VALUE/2) return ans;
        return -1;
    }
}
