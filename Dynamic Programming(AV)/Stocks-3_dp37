 Leetcode-123

// RECURSIVE

class Solution {
    public int solve(int index, int buy, int cap, int[] arr, int n){
        if(cap==0) return 0;
        if(index==n) return 0;

        int profit=0;
        if(buy==1){
            profit= Math.max(-arr[index]+solve(index+1,0,cap,arr,n),0+solve(index+1,1,cap,arr,n));
        }
        else{
            profit= Math.max(arr[index]+solve(index+1,1,cap-1,arr,n),0+solve(index+1,0,cap,arr,n));
        }
        return profit;
    }
    public int maxProfit(int[] prices) {
        int n= prices.length;
        return solve(0,1,2,prices,n);
    }
}


// MEM

class Solution {
    public int solve(int index, int buy, int cap, int[] arr, int n, int[][][] dp){
        if(cap==0) return 0;
        if(index==n) return 0;
        if(dp[index][buy][cap]!=-1) return dp[index][buy][cap];
        int profit=0;
        if(buy==1){
            profit= Math.max(-arr[index]+solve(index+1,0,cap,arr,n,dp),0+solve(index+1,1,cap,arr,n,dp));
        }
        else{
            profit= Math.max(arr[index]+solve(index+1,1,cap-1,arr,n,dp),0+solve(index+1,0,cap,arr,n,dp));
        }
        return dp[index][buy][cap]=profit;
    }
    public int maxProfit(int[] prices) {
        int n= prices.length;
        int[][][] dp= new int[n][2][3];
        for(int i=0; i<n; i++){
            for(int j=0; j<2; j++){
                for(int k=0; k<3; k++){
                    dp[i][j][k]=-1;
                }
            }
        }
        return solve(0,1,2,prices,n,dp);
    }
}


// TABULATION

class Solution {
    public int maxProfit(int[] prices) {
        int n= prices.length;
        int[][][] dp= new int[n+1][2][3];
        // base case
     
        for(int i=0; i<n; i++){
            for(int buy=0; buy<2; buy++){
                dp[i][buy][0]=0;
            }
        }

        for(int buy=0; buy<2; buy++){
            for(int cap=0; cap<3; cap++){
                dp[n][buy][cap]=0;
            }
        }

        //
        for(int i=n-1; i>=0; i--){
            for(int buy=0; buy<2; buy++){
               
                for(int cap=1; cap<3; cap++)
                
                if(buy==1){
                  dp[i][buy][cap]=Math.max(-prices[i]+dp[i+1][0][cap],0+dp[i+1][1][cap]);
                }
                else{
                  dp[i][buy][cap]= Math.max(prices[i]+dp[i+1][1][cap-1],0+dp[i+1][0][cap]);
                }
                
            }
        }
        return dp[0][1][2];
    }
}


SPACE OPTIMIZATION

class Solution {
    public int maxProfit(int[] prices) {
        int n= prices.length;
        // int[][][] dp= new int[n+1][2][3];
        // // base case
     
        // for(int i=0; i<n; i++){
        //     for(int buy=0; buy<2; buy++){
        //         dp[i][buy][0]=0;
        //     }
        // }

        // for(int buy=0; buy<2; buy++){
        //     for(int cap=0; cap<3; cap++){
        //         dp[n][buy][cap]=0;
        //     }
        // }

        int[][] next= new int[2][3];
        int[][] curr= new int[2][3];

        //
        for(int i=n-1; i>=0; i--){
            for(int buy=0; buy<2; buy++){
               
                for(int cap=1; cap<3; cap++)
                
                if(buy==1){
                  curr[buy][cap]=Math.max(-prices[i]+next[0][cap],0+next[1][cap]);
                }
                else{
                  curr[buy][cap]= Math.max(prices[i]+next[1][cap-1],0+next[0][cap]);
                }
                
            }
            next=curr.clone();
        }
        return next[1][2];
    }
}


