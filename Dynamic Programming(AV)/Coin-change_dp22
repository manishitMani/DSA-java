 RECURSION+MEM

class Solution {
    public int solve(int index, int target, int[] arr, int[][] dp){
        if(index==0){ 
            if(target%arr[0]==0) return 1;
            else{
                return 0;
            }
        }
        if(dp[index][target]!=-1) return dp[index][target];
        int nt= solve(index-1,target,arr,dp);
        int t=0;
        if(target>=arr[index]){
            t=solve(index,target-arr[index],arr,dp);
        }
        return dp[index][target]=t+nt;
    }
    public int change(int amount, int[] coins) {
        int n= coins.length;
        int[][] dp= new int[n][amount+1];
        for(int i=0; i<n; i++){
            for(int j=0; j<amount+1; j++){
                dp[i][j]=-1;
            }
        }
        return solve(n-1,amount,coins,dp);
    }
}


TABULATION
class Solution {
    public int change(int amount, int[] coins) {
        int n= coins.length;
        int[][] dp= new int[n][amount+1];
        // base case
        for(int i=0; i<amount+1; i++){
            if(i%coins[0]==0){
                dp[0][i]=1;
            }
            else{
                dp[0][i]=0;
            }
        }

        for(int i=1; i<n; i++){
            for(int j=0; j<amount+1; j++){
                int nt= dp[i-1][j];
                int t=0;
                if(j>=coins[i]){
                    t=dp[i][j-coins[i]];
                }
                dp[i][j]=t+nt;
            } 
        }
        return dp[n-1][amount];
    }
}

 SPACE OPTIMISATION

class Solution {
    public int change(int amount, int[] coins) {
        int n= coins.length;
        int[][] dp= new int[n][amount+1];
        // base case
        int[] prev= new int[amount+1];
        for(int i=0; i<amount+1; i++){
            if(i%coins[0]==0){
                prev[i]=1;
            }
            else{
                prev[i]=0;
            }
        }

        for(int i=1; i<n; i++){
            int[] curr= new int[amount+1];
            for(int j=0; j<amount+1; j++){
                int nt= prev[j];
                int t=0;
                if(j>=coins[i]){
                    t=curr[j-coins[i]];
                }
                curr[j]=t+nt;
            } 
            prev= curr.clone();
        }
        return prev[amount];
    }
}
