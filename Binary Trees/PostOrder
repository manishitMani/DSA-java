// RECURSIVE

class Solution {
    public List<Integer> traversal(TreeNode root, List<Integer> list){
        if(root==null){
            return list;
        }
        traversal(root.left,list);
        traversal(root.right,list);
        list.add(root.val);
        return list;
    }
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list= new ArrayList<Integer>();
        List<Integer> ans= traversal(root,list);
        return ans;
    }
}


// ITERATIVE --> using two stacks

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans= new ArrayList<>();
        Stack<TreeNode> st= new Stack<>();
        Stack<TreeNode> s= new Stack<>();
        if(root==null){
            return ans;
        }
        st.push(root);
        while(st.size()>0){
            TreeNode node= st.pop();
            s.push(node);
            if(node.left!=null){
                st.push(node.left);
            }
            if(node.right!=null){
                st.push(node.right);
            }
        }

        while(s.size()>0){
            ans.add(s.peek().val);
            s.pop();
        }
        return ans;
    }
}


// ITERATIVE ---> using one stack

