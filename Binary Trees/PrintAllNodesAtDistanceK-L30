Leetcode- 863

class Solution {
    public void markParent(TreeNode root, Map<TreeNode,TreeNode> parent_track, TreeNode target){
        Queue<TreeNode> q= new LinkedList<>();
        q.offer(root);
        while(q.size()>0){
            TreeNode current= q.poll();
            if(current.left!=null){
                parent_track.put(current.left,current);
                q.offer(current.left);
            }
            if(current.right!=null){
                parent_track.put(current.right,current);
                q.offer(current.right);
            }
        }
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        Map<TreeNode,TreeNode> parent_track= new HashMap<>();
        markParent(root,parent_track,target);
        Map<TreeNode,Boolean> visited= new HashMap<>();
        Queue<TreeNode> q= new LinkedList<>();
        q.offer(target);
        visited.put(target,true);
        int currLevel=0;
        while(q.size()>0){
            int size= q.size();
            if(currLevel==k) break;
            currLevel++;
            for(int i=0; i<size; i++){
                TreeNode current= q.poll();
                if(current.left!=null && visited.get(current.left)==null){
                    q.offer(current.left);
                    visited.put(current.left,true);
                }

                if(current.right!=null && visited.get(current.right)==null){
                    q.offer(current.right);
                    visited.put(current.right,true);
                }

                if(parent_track.get(current)!=null && visited.get(parent_track.get(current))==null){
                    q.offer(parent_track.get(current));
                    visited.put(parent_track.get(current),true);
                }
            }
            
        }

        List<Integer> list= new ArrayList<>();
        while(q.size()>0){
            list.add(q.poll().val);
        }
        return list;
    }
}
