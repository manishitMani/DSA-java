
import java.util.*;

// DEFINATION OF TREENODE CLASS

class TreeNode{
    
    int value;
    TreeNode left;
    TreeNode right;
    
    TreeNode(int value){
        this.value=value;
    }
    
}

class Pair{
    
    int line;
    TreeNode node;
    Pair(int line, TreeNode node){
        this.line= line;
        this.node= node;
    }
    
}



 // TOPVIEW FUNCTION
 
 public static ArrayList<Integer> topView(TreeNode root){
     
     
     ArrayList<Integer> ans = new ArrayList<>();
     
     TreeMap<Integer,Integer> map = new TreeMap<>();
     
     Queue<Pair> q = new LinkedList<>();
     
     q.add(new Pair(0,root));
     
     if(root==null){
         return ans;
     }
     
     while(!q.isEmpty()){
         
         Pair temp = q.remove();
         int line = temp.line;
         TreeNode node = temp.node;
         
         if(!map.containsKey(line)){
             map.put(line,node.value);
         }
         
         if(node.left!=null){
             q.add(new Pair(line-1,node.left));
         }
         
         if(node.right!=null){
             q.add(new Pair(line+1,node.right));
         }
         
     }
     
     for(int nodeValue : map.values()){
         ans.add(nodeValue);
     }
     
     
     return ans;
     
     
 }
 
 
}




OR

class pair{
	int verticle;
	BinaryTreeNode node;
	pair(int verticle, BinaryTreeNode node){
		this.verticle= verticle;
		this.node=node;
	}
}
public class Solution {
	public static ArrayList<Integer> getTopView(BinaryTreeNode root) {
		ArrayList<Integer> list= new ArrayList<>();
		Map<Integer,Integer> map= new TreeMap<>();
		if(root==null){
			return list;
		}
		Queue<pair> q= new LinkedList<>();
		q.add(new pair(0,root));
		while(q.size()>0){
			pair p= q.remove();
			int v= p.verticle;
			BinaryTreeNode node= p.node;
			if(!map.containsKey(v)){
				map.put(v,node.val);
			}

			if(node.left!=null){
				q.add(new pair(v-1,node.left));
			}
			if(node.right!=null){
				q.add(new pair(v+1,node.right));
			}
		}

		for(Map.Entry<Integer,Integer> entry: map.entrySet()){
			list.add(entry.getValue());
		}

		return list;
	}
}
