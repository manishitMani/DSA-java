// RECURSIVE

class Solution {
    public List<Integer> traversal(TreeNode root, List<Integer> list){
        if(root==null){
            return list;
        }
        traversal(root.left,list);
        list.add(root.val);
        traversal(root.right,list);
        return list;
    }
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list= new ArrayList<Integer>();
        List<Integer> ans= traversal(root,list);
        return ans;
    }
}


// ITERATIVE

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans= new ArrayList<>();
        Stack<TreeNode> st= new Stack<>();
        if(root==null){
            return ans;
        }
        TreeNode node= root;
        while(true){
            if(node!=null){
                st.push(node);
                node=node.left;
            }
            else{
                if(st.size()==0){
                    break;
                }
                node= st.pop();
                ans.add(node.val);
                node=node.right;
            }
        }
        return ans;
    }
}
